{"version":3,"sources":["Alert.js","App.js","types.js","serviceWorker.js","reducers.js","store.js","index.js","logo.svg"],"names":["Alert","text","buttonText","type","onClick","dispatch","useDispatch","useEffect","timer","setTimeout","clearTimeout","className","App","isServiceWorkerInitialized","useSelector","state","serviceWorkerInitialized","isServiceWorkerUpdated","serviceWorkerUpdated","serviceWorkerRegistration","registrationWaiting","waiting","postMessage","addEventListener","e","target","window","location","reload","src","logo","alt","JSON","stringify","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootReducer","action","payload","configureStore","store","createStore","ReactDOM","render","document","getElementById","process","URL","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.f2e48db9.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport './Alert.css';\r\n\r\nconst Alert = ({ text, buttonText, type, onClick }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!onClick) {\r\n      const timer = setTimeout(() => {\r\n        dispatch({ type });\r\n      }, 6000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"alert\">\r\n      {text} {buttonText && <button onClick={onClick}>{buttonText}</button>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { SW_INIT, SW_UPDATE } from './types';\r\nimport Alert from './Alert';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const isServiceWorkerInitialized = useSelector(\r\n    state => state.serviceWorkerInitialized,\r\n  );\r\n  const isServiceWorkerUpdated = useSelector(\r\n    state => state.serviceWorkerUpdated,\r\n  );\r\n  const serviceWorkerRegistration = useSelector(\r\n    state => state.serviceWorkerRegistration,\r\n  );\r\n\r\n  const updateServiceWorker = () => {\r\n    const registrationWaiting = serviceWorkerRegistration.waiting;\r\n\r\n    if (registrationWaiting) {\r\n      registrationWaiting.postMessage({ type: 'SKIP_WAITING' });\r\n\r\n      registrationWaiting.addEventListener('statechange', e => {\r\n        if (e.target.state === 'activated') {\r\n          window.location.reload();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-alert\">\r\n        {isServiceWorkerInitialized && (\r\n          <Alert text=\"Service Worker is initialized for the first time\" type={SW_INIT} />\r\n        )}\r\n        {isServiceWorkerUpdated && (\r\n          <Alert\r\n            text=\"There is a new version available.\"\r\n            buttonText=\"Update\"\r\n            type={SW_UPDATE}\r\n            onClick={updateServiceWorker}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          isServiceWorkerInitialized:{' '}\r\n          {JSON.stringify(isServiceWorkerInitialized)}\r\n        </p>\r\n        <p>isServiceWorkerUpdated: {JSON.stringify(isServiceWorkerUpdated)}</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const SW_INIT = 'SW_INIT';\r\nexport const SW_UPDATE = 'SW_UPDATE';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  console.log(process.env.NODE_ENV,'url login');\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SW_INIT, SW_UPDATE } from './types';\r\n\r\nfunction rootReducer(state = {}, action) {\r\n  switch (action.type) {\r\n    case SW_INIT:\r\n      return {\r\n        ...state,\r\n        serviceWorkerInitialized: !state.serviceWorkerInitialized,\r\n      };\r\n    case SW_UPDATE:\r\n      return {\r\n        ...state,\r\n        serviceWorkerUpdated: !state.serviceWorkerUpdated,\r\n        serviceWorkerRegistration: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nfunction configureStore() {\r\n  return createStore(rootReducer, {\r\n    serviceWorkerInitialized: false,\r\n    serviceWorkerUpdated: false,\r\n    serviceWorkerRegistration: null,\r\n  });\r\n}\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './store';\r\nimport { SW_INIT, SW_UPDATE } from './types';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n  onSuccess: () => store.dispatch({ type: SW_INIT }),\r\n  onUpdate: registration =>\r\n    store.dispatch({ type: SW_UPDATE, payload: registration }),\r\n});\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}